
#@func - 通过netstat统计各个状态的信息
netstatcount(){
    # LAST_ACK 5   (正在等待处理的请求数) 
    # SYN_RECV 30 
    # ESTABLISHED 1597 (正常数据传输状态) 
    # FIN_WAIT1 51 
    # FIN_WAIT2 504 
    # TIME_WAIT 1057 (处理完毕，等待超时结束的请求数) 
    netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'
}


#@func - # 通过定期读取/sys/class/net/eth0/statistics/rx和tx系列的包 显示网络的负载情况
netspeed(){
	INTERVAL="1"  # update interval in seconds
 
	if [ -z "$1" ]; then
	        echo
	        echo usage: $0 [network-interface]
	        echo
	        echo e.g. $0 eth0
	        echo
	        exit
	fi
	 
	IF=$1
	 
	while true
	do
	        R1=`cat /sys/class/net/$1/statistics/rx_bytes`
	        T1=`cat /sys/class/net/$1/statistics/tx_bytes`
	        sleep $INTERVAL
	        R2=`cat /sys/class/net/$1/statistics/rx_bytes`
	        T2=`cat /sys/class/net/$1/statistics/tx_bytes`
	        TBPS=`expr $T2 - $T1`
	        RBPS=`expr $R2 - $R1`
	        TKBPS=`expr $TBPS / 1024`
	        RKBPS=`expr $RBPS / 1024`
	        echo "TX $1: $TKBPS kb/s RX $1: $RKBPS kb/s"
	done
}

#@func - 生成指定目录下的文件hash信息
function hash_dir(){
    log_file="/webapp07/nfs/hashlog/69_"`date +%Y%m%d_%H`"_hash.log"
    for file in `ls $1`
    do
        if [ -d $1"/"$file ] 
        then
            hash_dir $1"/"$file
        else
            hash=`md5sum $1"/"$file`
            echo $hash >> $log_file
        fi
    done
}

所以，只要

ll /proc/${PID}/fd | wc -l

ll /proc/${PID}/task | wc -l （效果等同pstree -p | wc -l）

就能知道进程打开的句柄数和线程数